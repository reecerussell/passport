// Code generated by MockGen. DO NOT EDIT.
// Source: ../filesys.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilesys is a mock of Filesys interface.
type MockFilesys struct {
	ctrl     *gomock.Controller
	recorder *MockFilesysMockRecorder
}

// MockFilesysMockRecorder is the mock recorder for MockFilesys.
type MockFilesysMockRecorder struct {
	mock *MockFilesys
}

// NewMockFilesys creates a new mock instance.
func NewMockFilesys(ctrl *gomock.Controller) *MockFilesys {
	mock := &MockFilesys{ctrl: ctrl}
	mock.recorder = &MockFilesysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesys) EXPECT() *MockFilesysMockRecorder {
	return m.recorder
}

// EnsureDirectory mocks base method.
func (m *MockFilesys) EnsureDirectory(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDirectory", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDirectory indicates an expected call of EnsureDirectory.
func (mr *MockFilesysMockRecorder) EnsureDirectory(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDirectory", reflect.TypeOf((*MockFilesys)(nil).EnsureDirectory), path)
}

// FileExists mocks base method.
func (m *MockFilesys) FileExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists.
func (mr *MockFilesysMockRecorder) FileExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockFilesys)(nil).FileExists), path)
}

// Read mocks base method.
func (m *MockFilesys) Read(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFilesysMockRecorder) Read(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFilesys)(nil).Read), path)
}

// Write mocks base method.
func (m *MockFilesys) Write(path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockFilesysMockRecorder) Write(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFilesys)(nil).Write), path, data)
}
