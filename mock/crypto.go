// Code generated by MockGen. DO NOT EDIT.
// Source: ../crypto.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoProvider is a mock of CryptoProvider interface.
type MockCryptoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoProviderMockRecorder
}

// MockCryptoProviderMockRecorder is the mock recorder for MockCryptoProvider.
type MockCryptoProviderMockRecorder struct {
	mock *MockCryptoProvider
}

// NewMockCryptoProvider creates a new mock instance.
func NewMockCryptoProvider(ctrl *gomock.Controller) *MockCryptoProvider {
	mock := &MockCryptoProvider{ctrl: ctrl}
	mock.recorder = &MockCryptoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoProvider) EXPECT() *MockCryptoProviderMockRecorder {
	return m.recorder
}

// DecryptString mocks base method.
func (m *MockCryptoProvider) DecryptString(value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptString", value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptString indicates an expected call of DecryptString.
func (mr *MockCryptoProviderMockRecorder) DecryptString(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptString", reflect.TypeOf((*MockCryptoProvider)(nil).DecryptString), value)
}

// EncryptString mocks base method.
func (m *MockCryptoProvider) EncryptString(value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptString", value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptString indicates an expected call of EncryptString.
func (mr *MockCryptoProviderMockRecorder) EncryptString(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptString", reflect.TypeOf((*MockCryptoProvider)(nil).EncryptString), value)
}
